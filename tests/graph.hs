import Text.XML.YJSVG

main = putStrLn $ showSVG 600 550 $ Group [ Translate 0 100 ] weatherGraph : [
   Text 20 20 15 (ColorName "black") "[ 1897-2009 ]"
 ]

weatherGraph :: [ SVG ]
weatherGraph =  mkGraphSVG 8 30 [ 12, 17 ] [
     ( "green", [
                                                 12.5, 13.3, 13.0,
       12.9, 13.0, 12.9, 13.1, 13.1, 12.8, 12.5, 12.8, 12.4, 12.8,
       12.8, 13.6, 13.1, 12.7, 13.9, 13.5, 13.9, 12.9, 13.0, 13.4,
       13.5, 12.9, 13.7, 13.4, 13.1, 12.9, 12.6, 13.0, 13.1, 13.3,
       13.7, 12.9, 13.4, 13.5, 12.6, 13.0, 12.9, 13.6, 13.4, 13.6,
       13.5, 13.4, 13.6, 13.3, 13.0, 12.4, 13.6, 12.8, 13.9, 13.3,
       13.8, 13.5, 13.4, 13.3, 13.6, 14.2, 13.4, 13.6, 14.0, 14.3,
       14.1, 14.5, 13.9, 13.5, 13.9, 13.4, 13.8, 13.9, 13.8, 13.8,
       13.5, 13.5, 14.2, 13.8, 13.1, 13.9, 13.4, 14.2, 14.3, 15.1,
       13.5, 13.4, 14.2, 13.8, 13.2, 14.1, 13.5, 14.7, 13.6, 14.6,
       15.3, 14.8, 14.4, 13.9, 15.4, 14.5, 14.1, 15.0, 15.3, 15.2,
       14.9, 14.8, 14.8, 14.3, 15.5, 14.5, 14.8, 15.3, 14.9, 15.1
      ] )
   , ( "blue", [
                                                  8.3,  8.9,  8.7,
        8.5,  8.7,  8.8,  8.9,  8.8,  8.6,  8.2,  8.5,  8.2,  8.5,
	8.6,  9.3,  8.6,  8.2,  9.2,  9.3,  9.6,  8.4,  8.5,  8.9,
	9.3,  8.6,  9.1,  9.0,  8.4,  8.5,  7.8,  8.5,  9.0,  8.7,
	9.3,  8.6,  9.3,  9.2,  8.2,  8.7,  8.6,  9.4,  9.0,  9.2,
	8.9,  9.1,  8.9,  8.8,  8.6,  8.0,  9.3,  8.4,  9.7,  9.2,
	9.9,  9.1,  9.4,  9.3,  9.6, 10.0,  9.4,  9.5,  9.8, 10.4,
	9.9, 10.4,  9.6,  9.4,  9.7,  8.8,  9.4,  9.3,  9.4,  9.3,
	9.1,  9.1,  9.5,  9.1,  8.7,  9.6,  8.9,  9.7,  9.7, 10.7,
	9.3,  9.1,  9.9,  9.6,  9.0,  9.9,  9.2, 10.3,  9.5, 10.6,
       11.1, 10.8, 10.1,  9.7, 11.0, 10.2,  9.6, 10.4, 11.2, 10.8,
       10.6, 10.4, 10.4, 10.2, 11.0, 10.1, 10.8, 10.8, 10.8, 11.0
      ] )
   , ( "red", [
                                                 17.7, 18.5, 18.5,
       18.3, 18.2, 18.1, 18.1, 18.3, 18.0, 17.8, 18.3, 18.1, 18.1,
       18.2, 19.0, 18.5, 18.1, 19.5, 18.8, 19.1, 18.3, 18.4, 18.7,
       18.6, 18.5, 19.4, 18.9, 18.9, 18.4, 18.6, 18.7, 18.4, 18.8,
       19.2, 18.3, 18.8, 18.8, 18.0, 18.3, 18.3, 18.9, 18.7, 19.0,
       19.1, 18.7, 19.2, 18.9, 18.5, 17.8, 19.1, 18.3, 19.3, 18.6,
       18.9, 19.0, 18.6, 18.3, 18.7, 19.6, 18.6, 18.9, 19.1, 19.2,
       19.4, 19.3, 19.2, 18.7, 18.9, 18.7, 18.9, 19.3, 19.1, 19.1,
       18.7, 18.8, 19.3, 19.4, 18.3, 18.9, 18.5, 19.5, 19.9, 20.4,
       18.3, 18.4, 19.1, 18.8, 18.3, 19.0, 18.4, 19.9, 18.6, 19.2,
       20.2, 19.7, 19.5, 18.7, 20.5, 19.7, 19.5, 20.5, 20.2, 20.5,
       20.2, 20.1, 20.1, 19.2, 21.0, 19.8, 19.7, 20.5, 20.0, 20.1
      ] )
   ]

mkGraphSVG ::
  Double -> Double -> [ Double ] -> [ ( String, [ Double ] ) ] -> [ SVG ]
mkGraphSVG bs scl ln vss
  = map mkText ln ++
    map mkLines ln ++ map (uncurry $ mkGraphPolyline bs scl) vss
  where
  mkLines :: Double -> SVG
  mkLines v = Line 60 (400 - (v-bs) * scl) 595 (400 - (v-bs) * scl)
	(ColorName "gray") 1
  mkText :: Double -> SVG
  mkText l = Text 20 (402.5 - (l-bs) * scl) 10 (ColorName "gray") $ show l

mkGraphPolyline :: Double -> Double -> String -> [ Double ] -> SVG
mkGraphPolyline bs scl cl vals
  = Polyline points (ColorName "none") (ColorName cl) 2
  where
  points :: [ (Double, Double) ]
  points = zipWith (\i v -> ( 90 + i * 4, 400 - (v-bs) * scl )) [ 0 .. ] vals
